{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPNnXRAu63obXIiopQ5ESD7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8AcF8Xr0FP_q","executionInfo":{"status":"ok","timestamp":1710472354280,"user_tz":-600,"elapsed":23064,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"ce37c2d2-6814-468a-d598-ec219e3899f1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: S28383\n","Gender: Female\n","Units Passed (comma-separated): WOM1000\n","Semester: elective\n","bikash is not eligible for the course\n"]}],"source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, unit_conditions):\n","    for condition in unit_conditions:\n","        required_units = condition.split(\",\")\n","        if all(unit in student.units_passed for unit in required_units):\n","            return True\n","    return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        unit_conditions = [condition for condition in data['condition']]\n","        if check_eligibility(student, unit_conditions):\n","            print(f\"{student.name} is eligible for the course\")\n","        else:\n","            print(f\"{student.name} is not eligible for the course\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"]},{"cell_type":"code","source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, unit_conditions):\n","    for condition in unit_conditions:\n","        required_units = condition.split(\",\")\n","        if all(unit in student.units_passed for unit in required_units):\n","            if \"only for female\" in condition and student.gender.lower() == \"female\" and \"WOM1000\" in student.units_passed:\n","                return True\n","            elif \"only for female\" not in condition:\n","                return True\n","    return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        unit_conditions = [condition for condition in data['condition']]\n","        if check_eligibility(student, unit_conditions):\n","            print(f\"{student.name} is eligible for the course\")\n","        else:\n","            print(f\"{student.name} is not eligible for the course\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZqMjoxieHU6t","executionInfo":{"status":"ok","timestamp":1710472734416,"user_tz":-600,"elapsed":80264,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"169fde1c-d4ed-4206-ee6e-5f20097cbb48"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bhawana\n","Student ID: s19191\n","Gender: female\n","Units Passed (comma-separated): WOM1000\n","Semester: elective\n","Bhawana is not eligible for the course\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"be16_WQ_F8QK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, unit_conditions):\n","    for condition in unit_conditions:\n","        required_units = condition.split(\",\")\n","        if all(unit in student.units_passed for unit in required_units):\n","            if \"only for female\" in condition and student.gender.lower() == \"female\" and \"WOM1000\" in student.units_passed:\n","                return True\n","            elif \"only for female\" not in condition:\n","                return True\n","    return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        unit_conditions = [condition for condition in data['condition']]\n","        if check_eligibility(student, unit_conditions):\n","            print(f\"{student.name} is eligible for the course\")\n","        else:\n","            print(f\"{student.name} is not eligible for the course\")\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Tj5vQoCH5iK","executionInfo":{"status":"ok","timestamp":1710472900391,"user_tz":-600,"elapsed":81034,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"267db822-5f59-487f-e922-4b28196e1bc1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 2\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: S1283838\n","Gender: Male\n","Units Passed (comma-separated): BCO7000\n","Semester: 1\n","\n","Enter details for student 2:\n","Student Name: Bhawana\n","Student ID: s29992\n","Gender: female\n","Units Passed (comma-separated): WOM1000\n","Semester: elective\n","Bikash is not eligible for the course\n","Bhawana is not eligible for the course\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"eHF3amOwI5yc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, unit_conditions):\n","    for condition in unit_conditions:\n","        required_units = condition.split(\",\")\n","        if all(unit in student.units_passed for unit in required_units):\n","            if \"only for female\" in condition and student.gender.lower() == \"female\" and \"WOM1000\" in student.units_passed:\n","                return True\n","            elif \"only for female\" not in condition:\n","                return True\n","    return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        unit_conditions = [condition for condition in data['condition']]\n","        if check_eligibility(student, unit_conditions):\n","            print(f\"{student.name} is eligible for the course\")\n","        else:\n","            print(f\"{student.name} is not eligible for the course\")\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GpQg7lCiI6U5","executionInfo":{"status":"ok","timestamp":1710473155924,"user_tz":-600,"elapsed":19166,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"256de39e-67c1-411a-ce88-d025ffa5b4a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: \n","Student ID: dd22\n","Gender: female\n","Units Passed (comma-separated): WOM1000\n","Semester: elective\n"," is not eligible for the course\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"euqWrcGkXQPx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, condition, unit_passed):\n","    required_units = condition.split(\",\")\n","    if condition == \"\" or all(unit in unit_passed for unit in required_units):\n","        return True\n","    elif condition == \"only for female\" and student.gender.lower() == \"female\" and \"WOM1000\" in unit_passed:\n","        return True\n","    else:\n","        return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        for i in range(len(data['unit_code'])):\n","            if student.semester == data['semester'][i]:\n","                if check_eligibility(student, data['condition'][i], student.units_passed):\n","                    print(f\"{student.name} is eligible for the course {data['unit_name'][i]} ({data['unit_code'][i]})\")\n","                else:\n","                    print(f\"{student.name} is not eligible for the course {data['unit_name'][i]} ({data['unit_code'][i]})\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wP1MJlAeXQtX","executionInfo":{"status":"ok","timestamp":1710476914985,"user_tz":-600,"elapsed":85471,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"067b8354-024b-4fc1-b496-497dfda3006b"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the number of students: 2\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: S17272\n","Gender: male\n","Units Passed (comma-separated): BCO7000\n","Semester: 1\n","\n","Enter details for student 2:\n","Student Name: Bhawam\n","Student ID: sh222\n","Gender: female\n","Units Passed (comma-separated): WOM1000\n","Semester: 1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"nmKo1pqOJHqL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, condition, unit_passed):\n","    required_units = condition.split(\",\")\n","    if condition == \"\" or all(unit in unit_passed for unit in required_units):\n","        return True\n","    elif condition == \"only for female\" and student.gender.lower() == \"female\" and \"WOM1000\" in unit_passed:\n","        return True\n","    else:\n","        return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        for i in range(len(data['unit_code'])):\n","            if student.semester == data['semester'][i]:\n","                if check_eligibility(student, data['condition'][i], student.units_passed):\n","                    print(f\"{student.name} is eligible for the course {data['unit_name'][i]} ({data['unit_code'][i]})\")\n","                else:\n","                    print(f\"{student.name} is not eligible for the course {data['unit_name'][i]} ({data['unit_code'][i]})\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EAOkbI__YBRw","executionInfo":{"status":"ok","timestamp":1710477101916,"user_tz":-600,"elapsed":10203,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"2a5ae7c4-c9fe-4ce7-bb3c-d844a32d88c2"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: baka\n","Student ID: sjs'\n","Gender: sjsjs\n","Units Passed (comma-separated): sjjs\n","Semester: 1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"2Yjs3Ln4YCGl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, condition, unit_passed):\n","    required_units = condition.split(\",\")\n","    if condition == \"\" or all(unit in unit_passed for unit in required_units):\n","        return True\n","    elif condition == \"only for female\" and student.gender.lower() == \"female\" and \"WOM1000\" in unit_passed:\n","        return True\n","    else:\n","        return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        for i in range(len(data['unit_code'])):\n","            if student.semester == data['semester'][i]:\n","                if check_eligibility(student, data['condition'][i], student.units_passed):\n","                    print(f\"{student.name} is eligible for the course {data['unit_name'][i]} ({data['unit_code'][i]})\")\n","                else:\n","                    print(f\"{student.name} is not eligible for the course {data['unit_name'][i]} ({data['unit_code'][i]})\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KSKo7tXFYp0B","executionInfo":{"status":"ok","timestamp":1710477215670,"user_tz":-600,"elapsed":19435,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"18642688-2d8b-406f-bc9a-e2755309af1b"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: s13j\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, unit_conditions):\n","    for condition in unit_conditions:\n","        required_units = condition.split(\",\")\n","        if required_units[0] == \"\" or student.gender.lower() == \"female\":\n","            return True\n","        if all(unit in student.units_passed for unit in required_units):\n","            return True\n","    return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        print(f\"\\nChecking eligibility for {student.name} for each unit:\")\n","        for unit_name, condition, semester in zip(data['unit_name'], data['condition'], data['semester']):\n","            unit_conditions = [condition]\n","            if check_eligibility(student, unit_conditions):\n","                print(f\"{student.name} is eligible for {unit_name} in semester {semester}\")\n","            else:\n","                print(f\"{student.name} is not eligible for {unit_name} in semester {semester}\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yBT9-9jOZGcg","executionInfo":{"status":"ok","timestamp":1710477325542,"user_tz":-600,"elapsed":16899,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"b804ec0c-77f4-4155-ca24-e49a60077b02"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: s23\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","Checking eligibility for bikash for each unit:\n","bikash is eligible for coding for BA in semester 1\n","bikash is eligible for Biz analytics in semester 1\n","bikash is not eligible for Predictive Analytics in semester 2\n","bikash is not eligible for machine learning in semester 2\n","bikash is not eligible for Women in STEM in semester elective\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"W68vv61NZvl-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","class Student:\n","    def __init__(self, name, student_id, gender, units_passed, semester):\n","        self.name = name\n","        self.student_id = student_id\n","        self.gender = gender\n","        self.units_passed = units_passed\n","        self.semester = semester\n","\n","def create_student():\n","    st_name = input(\"Student Name: \")\n","    st_id = input(\"Student ID: \")\n","    gender = input(\"Gender: \")\n","    unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","    semester = input(\"Semester: \")\n","    return Student(st_name, st_id, gender, unit_passed, semester)\n","\n","def check_eligibility(student, unit_conditions):\n","    for condition in unit_conditions:\n","        required_units = condition.split(\",\")\n","        if required_units[0] == \"\" or student.gender.lower() == \"female\":\n","            return True\n","        if all(unit in student.units_passed for unit in required_units):\n","            return True\n","    return False\n","\n","def main():\n","    # Sample dictionary with data\n","    data = {\n","        'unit_name': ['coding for BA', 'Biz analytics', 'Predictive Analytics','machine learning','Women in STEM'],\n","        'unit_code': [\"BCO7006\", \"BCO7000\",\"BCO6008\", \"BCO7007\",\"WOM1000\"],\n","        'condition':[\"\",\"\",'BCO7006','BCO7000,BCO7006',\"only for female\"],\n","        'semester': [1, 1,2,2, 'elective']\n","    }\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # List to store student objects\n","    students = []\n","\n","    # Create student objects\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        student = create_student()\n","        students.append(student)\n","\n","    # Check eligibility for each student\n","    for student in students:\n","        print(f\"\\nChecking eligibility for {student.name} for each unit:\")\n","        for unit_name, condition, semester in zip(data['unit_name'], data['condition'], data['semester']):\n","            unit_conditions = [condition]\n","            if check_eligibility(student, unit_conditions):\n","                print(f\"{student.name} is eligible for {unit_name} in semester {semester}\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CXYkgpTAZv1S","executionInfo":{"status":"ok","timestamp":1710664969035,"user_tz":-600,"elapsed":22199,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"843bca6b-1453-4111-c05e-5232a7ddf80a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: jaj33\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 1\n","\n","Checking eligibility for Bikash for each unit:\n","Bikash is eligible for coding for BA in semester 1\n","Bikash is eligible for Biz analytics in semester 1\n","Bikash is eligible for Predictive Analytics in semester 2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"69bucS8blolr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","    df1 = pd.DataFrame(data)\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    df2 = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Print the DataFrame containing student data\n","    print(\"\\nStudent DataFrame:\")\n","    print(df2)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y2qEmEbvZHAk","executionInfo":{"status":"ok","timestamp":1710666696813,"user_tz":-600,"elapsed":25681,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"2e819dfc-4e8c-473e-b60f-badfbc9bc8fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash Poudel\n","Student ID: s12uee\n","Gender: male\n","Units Passed (comma-separated): BCO77e\n","Semester: 1\n","\n","Student DataFrame:\n","         st_name   st_id gender unit_passed semester\n","0  Bikash Poudel  s12uee   male    [BCO77e]        1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"vLa9LUJ8ng9f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            for code, course in zip(enroll_codes, enroll_courses):\n","                print(f\"Enroll code: {code} - {course}\")\n","            print(f\"Student ID: {row['st_id']}\")\n","            print(f\"Semester: {row['semester']}\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WKUSTjxDndFt","executionInfo":{"status":"ok","timestamp":1710732790805,"user_tz":-600,"elapsed":37975,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"dab613d3-e148-4ffe-db34-8fefa576b734"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: S1233\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 1\n","Bikash can enroll in the following units in semester 2:\n","Enroll code: BCO6008 - Predictive analytics\n","Enroll code: BCO7007 - Machine Learning\n","Student ID: S1233\n","Semester: 1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"COEcAHLhoCOw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [row['semester']] * len(enroll_codes)\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            print(enroll_df)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sovPOrImoChZ","executionInfo":{"status":"ok","timestamp":1710732916816,"user_tz":-600,"elapsed":31888,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"bad41d53-7b2b-4db1-9ad3-3f3106845b61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikah\n","Student ID: sss9929\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 1\n","Bikah can enroll in the following units in semester 2:\n","  Enroll code         Enroll course Student ID Semester\n","0     BCO6008  Predictive analytics    sss9929        1\n","1     BCO7007      Machine Learning    sss9929        1\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [2] * len(enroll_codes)  # Set semester to 2\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            print(enroll_df)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6r56HJempIU7","executionInfo":{"status":"ok","timestamp":1710733192325,"user_tz":-600,"elapsed":20554,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"2f8b8480-7b03-48e3-9be1-9fb86718f1ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: nn555\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 1\n","Bikash can enroll in the following units in semester 2:\n","  Enroll code         Enroll course Student ID  Semester\n","0     BCO6008  Predictive analytics      nn555         2\n","1     BCO7007      Machine Learning      nn555         2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"lhyox0Zbs-Me"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']:\n","            # If units passed is empty, consider first two units for semester 1\n","            enroll_df = unit_df[unit_df['semester'] == 1].head(2)\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            print(enroll_df[['unit_name', 'unit_code', 'semester']])\n","        elif row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [2] * len(enroll_codes)  # Set semester to 2\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            print(enroll_df)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QZ5g2mn7s-zW","executionInfo":{"status":"ok","timestamp":1710734202817,"user_tz":-600,"elapsed":15398,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"61b2a1f2-77ea-48e1-9d3b-4bf6bb00f699"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: jaj333\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"T_Iku_vvtodM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']:\n","            # If unit_passed is empty, select first two units for semester 1\n","            eligible_units = unit_df[unit_df['semester'] == 1].head(2)\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [1] * len(enroll_codes)  # Set semester to 1\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            print(enroll_df)\n","        elif row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [2] * len(enroll_codes)  # Set semester to 2\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            print(enroll_df)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZPpbCkGotorK","executionInfo":{"status":"ok","timestamp":1710734666504,"user_tz":-600,"elapsed":16774,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"33a7f3ad-ce66-4720-9b36-f735d0f2b2b5"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: kk33\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 6\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"7UvNNZJSvw55"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']:\n","            # If unit_passed is empty, select first three units for semester 1\n","            eligible_units = unit_df[unit_df['semester'] == 1].head(3)\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [1] * len(enroll_codes)  # Set semester to 1\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            print(enroll_df)\n","        elif row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [2] * len(enroll_codes)  # Set semester to 2\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            print(enroll_df)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SpUzfQO6vxgL","executionInfo":{"status":"ok","timestamp":1710735934087,"user_tz":-600,"elapsed":17934,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"6edf00e3-166a-4b13-ad62-375d87a90f6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Ika\n","Student ID: kakak3\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 1\n","Ika can enroll in the following units in semester 2:\n","  Enroll code         Enroll course Student ID  Semester\n","0     BCO6008  Predictive analytics     kakak3         2\n","1     BCO7007      Machine Learning     kakak3         2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"KQVsDXc2zjkk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']:\n","            # If unit_passed is empty, select first three units for semester 1\n","            eligible_units = unit_df[unit_df['semester'] == 1].head(3)\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [1] * len(enroll_codes)  # Set semester to 1\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            print(unit_df.head(3))\n","        elif row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QTnw5P4F1WUQ","executionInfo":{"status":"ok","timestamp":1710736447077,"user_tz":-600,"elapsed":32054,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"65c777c3-ec6b-4fbd-d176-00d1ddd0daa5"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Biakash\n","Student ID: ddd3\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"oRqr6jMm1fVA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            print(unit_df.head(3))\n","        elif row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"kLRx5sFj4pq6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            units_list = unit_df.head(2).values.tolist()\n","            student_id_df = pd.DataFrame([['Student ID:', row['st_id']]])  # Create a DataFrame with student ID\n","            combined_df = pd.concat([unit_df.head(2), student_id_df], ignore_index=True)  # Concatenate both DataFrames\n","            print(combined_df)\n","            print(\"\\n\")  # Add a new line for clarity\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"12E7tJjcFZE1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","print(\"Enrollment Management system for Victoria university is running............\")\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Set the index starting from 1\n","    unit_df.index = range(1, len(unit_df) + 1)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']==0:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            enroll_data = {\n","                'unit_name': unit_df['unit_name'].head(2),\n","                'unit_code': unit_df['unit_code'].head(2),\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df = pd.DataFrame(enroll_data)\n","            print(enroll_df)\n","        #if row[\"unit_passed\"]\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"NlticCC1xteJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"zTf0UF2R5Vwq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","print(\"Enrollment Management system for Victoria university is running............\")\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Set the index starting from 1\n","    unit_df.index = range(1, len(unit_df) + 1)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed'] == 0:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            enroll_data = {\n","                'unit_name': unit_df['unit_name'].head(2),\n","                'unit_code': unit_df['unit_code'].head(2),\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df = pd.DataFrame(enroll_data)\n","            print(enroll_df)\n","        elif 'BCO7006' in row['unit_passed']:  # Check if BCO7006 is in the list of units passed\n","            enroll_data1 = {\n","                'unit_name': unit_df['unit_name'].iloc[2:4],\n","                'unit_code': unit_df['unit_code'].iloc[2:4],\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df1 = pd.DataFrame(enroll_data1)\n","            print(enroll_df1)\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rIkzZFr04KzO","executionInfo":{"status":"ok","timestamp":1710770732238,"user_tz":-600,"elapsed":47623,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"59b8b403-fc2b-4ebd-a601-7e97ad510378"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enrollment Management system for Victoria university is running............\n","Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka123\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 1\n","Bikash can enroll in the following units in semester 1:\n","       unit_name unit_code    st_id semester\n","1  Coding for BA   BCO7006  kaka123        1\n","2  Biz analytics   BCO7000  kaka123        1\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","print(\"Enrollment Management system for Victoria university is running............\")\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Set the index starting from 1\n","    unit_df.index = range(1, len(unit_df) + 1)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']==0:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            enroll_data = {\n","                'unit_name': unit_df['unit_name'].head(2),\n","                'unit_code': unit_df['unit_code'].head(2),\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df = pd.DataFrame(enroll_data)\n","            print(enroll_df)\n","        elif 'BCO7006' in row['unit_passed']:  # Check if BCO7006 is in the list of units passed\n","            enroll_data = {\n","                'unit_name': unit_df['unit_name'].iloc[2:4],\n","                'unit_code': unit_df['unit_code'].iloc[2:4],\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df = pd.DataFrame(enroll_data)\n","            print(enroll_df)\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yPVmH7se5W9Z","executionInfo":{"status":"ok","timestamp":1710771053708,"user_tz":-600,"elapsed":43662,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"9f3a7573-f83f-4a21-f3fc-3583a142b955"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enrollment Management system for Victoria university is running............\n","Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka12345\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","Bikash can enroll in the following units in semester 1:\n","       unit_name unit_code      st_id semester\n","1  Coding for BA   BCO7006  kaka12345        2\n","2  Biz analytics   BCO7000  kaka12345        2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Fo3YbfPl5fZO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","print(\"Enrollment Management system for Victoria university is running............\")\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Set the index starting from 1\n","    unit_df.index = range(1, len(unit_df) + 1)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']==0:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            enroll_data = {\n","                'unit_name': unit_df['unit_name'].iloc[2:4],  # Selecting 3rd and 4th rows\n","                'unit_code': unit_df['unit_code'].iloc[2:4],  # Selecting 3rd and 4th rows\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df = pd.DataFrame(enroll_data)\n","            print(enroll_df)\n","        elif 'BCO7006' in row['unit_passed']:  # Check if BCO7006 is in the list of units passed\n","            enroll_data = {\n","                'unit_name': unit_df['unit_name'].iloc[2:4],\n","                'unit_code': unit_df['unit_code'].iloc[2:4],\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df = pd.DataFrame(enroll_data)\n","            print(enroll_df)\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZichVVeR7kJQ","executionInfo":{"status":"ok","timestamp":1710771607161,"user_tz":-600,"elapsed":15502,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"0a7f0651-e631-474b-ced5-de9cac307610"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enrollment Management system for Victoria university is running............\n","Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: jaja123\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","Bikash can enroll in the following units in semester 1:\n","              unit_name unit_code    st_id semester\n","3  Predictive analytics   BCO6008  jaja123        1\n","4      Machine Learning   BCO7007  jaja123        1\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","print(\"Enrollment Management system for Victoria university is running............\")\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Set the index starting from 1\n","    unit_df.index = range(1, len(unit_df) + 1)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed']:  # Check if units passed is not empty\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            enroll_dataa = {\n","                'unit_name': unit_df['unit_name'].head(),  # Selecting 3rd and 4th rows\n","                'unit_code': unit_df['unit_code'].head(),  # Selecting 3rd and 4th rows\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enrolll_df = pd.DataFrame(enroll_dataa)\n","            print(enrolll_df)\n","        elif 'BCO7006' in row['unit_passed']==0:  # Check if BCO7006 is in the list of units passed\n","            enroll_data = {\n","                'unit_name': unit_df['unit_name'].iloc[2:4],\n","                'unit_code': unit_df['unit_code'].iloc[2:4],\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df = pd.DataFrame(enroll_data)\n","            print(enroll_df)\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"id":"PIOKuHQ48XLe","executionInfo":{"status":"error","timestamp":1710775515025,"user_tz":-600,"elapsed":16998,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"6239729c-dbe1-46aa-f70c-7155aa107c75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enrollment Management system for Victoria university is running............\n","Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka123\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","Bikash can enroll in the following units in semester 1:\n"]},{"output_type":"error","ename":"ValueError","evalue":"array length 2 does not match index length 5","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-7bb33ca0a0ce>\u001b[0m in \u001b[0;36m<cell line: 77>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-15-7bb33ca0a0ce>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     62\u001b[0m                 \u001b[0;34m'semester'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'semester'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m             }\n\u001b[0;32m---> 64\u001b[0;31m             \u001b[0menrolll_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menroll_dataa\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menrolll_df\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;34m'BCO7006'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'unit_passed'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Check if BCO7006 is in the list of units passed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    662\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    663\u001b[0m             \u001b[0;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 664\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    665\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    666\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"dtype\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 493\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    494\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;31m# figure out the index, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extract_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_extract_index\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    678\u001b[0m                         \u001b[0;34mf\"length {len(index)}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m                     )\n\u001b[0;32m--> 680\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    681\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    682\u001b[0m                 \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdefault_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: array length 2 does not match index length 5"]}]},{"cell_type":"code","source":[],"metadata":{"id":"h2FQ7WsB84Cd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_5-J0rWjctfd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lo5b2UDVcuzp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","print(\"Enrollment Management system for Victoria university is running............\")\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Set the index starting from 1\n","    unit_df.index = range(1, len(unit_df) + 1)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed']:  # Check if units passed is not empty\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            enroll_dataa = {\n","                'unit_name': unit_df['unit_name'].head(),  # Selecting 3rd and 4th rows\n","                'unit_code': unit_df['unit_code'].head(),  # Selecting 3rd and 4th rows\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enrolll_df = pd.DataFrame(enroll_dataa)\n","            print(enrolll_df)\n","        elif not row['unit_passed'] or 'BCO7006' in row['unit_passed']:  # Check if units passed is empty or contains 'BCO7006'\n","            enroll_data = {\n","                'unit_name': unit_df['unit_name'].iloc[2:4],\n","                'unit_code': unit_df['unit_code'].iloc[2:4],\n","                'st_id': [row['st_id']] * 2,\n","                'semester': [row['semester']] * 2\n","            }\n","            enroll_df = pd.DataFrame(enroll_data)\n","            print(enroll_df)\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"id":"bGiXCi6I-1PB","executionInfo":{"status":"error","timestamp":1710775128260,"user_tz":-600,"elapsed":19544,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"a808d34f-d514-4412-c60f-244535455d3b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enrollment Management system for Victoria university is running............\n","Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka123\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","Bikash can enroll in the following units in semester 1:\n"]},{"output_type":"error","ename":"ValueError","evalue":"array length 2 does not match index length 5","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-a0de365302e8>\u001b[0m in \u001b[0;36m<cell line: 77>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-14-a0de365302e8>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     62\u001b[0m                 \u001b[0;34m'semester'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'semester'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m             }\n\u001b[0;32m---> 64\u001b[0;31m             \u001b[0menrolll_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menroll_dataa\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menrolll_df\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'unit_passed'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'BCO7006'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'unit_passed'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Check if units passed is empty or contains 'BCO7006'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    662\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    663\u001b[0m             \u001b[0;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 664\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    665\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    666\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"dtype\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 493\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    494\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;31m# figure out the index, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extract_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_extract_index\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    678\u001b[0m                         \u001b[0;34mf\"length {len(index)}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m                     )\n\u001b[0;32m--> 680\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    681\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    682\u001b[0m                 \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdefault_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: array length 2 does not match index length 5"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            kaka_df = pd.concat([ pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.head(2)], axis=1)\n","            print(kaka_df)\n","        elif \"BCO7006\" in row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            kakaa_df = pd.concat([ pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.iloc[2:4]], axis=1)\n","            print(kakaa_df)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hi63EYYXcvwO","executionInfo":{"status":"ok","timestamp":1710780284335,"user_tz":-600,"elapsed":26112,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"2e88afdc-7900-43f8-f0cb-23b6d31fa8b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka123\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","Bikash can enroll in the following units in semester 1:\n","     st_id      unit_name unit_code semester\n","0  kaka123  Coding for BA   BCO7006        1\n","1  kaka123  Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"K5pWAdOGddxZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Rvi6qDVrdeeD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"BO403H0WdekI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","for index, row in student_df.iterrows():\n","    if row['unit_passed']:\n","        print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","        kaka_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.head().iloc[:, :2]], axis=1)\n","        print(kaka_df)\n","    elif \"BCO7006\" in row['unit_passed']:\n","        print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","        kakaa_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.iloc[2, :]], axis=1)\n","        print(kakaa_df)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"2dDCqWxFdeod","executionInfo":{"status":"error","timestamp":1710781199912,"user_tz":-600,"elapsed":434,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"5b708604-c3a3-4e7a-eb79-8d1c7578d071"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'student_df' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-6eafd2bc5789>\u001b[0m in \u001b[0;36m<cell line: 50>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0;31m# Check eligibility for each student\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstudent_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miterrows\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'unit_passed'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{row['st_name']} can enroll in the following units in semester 1:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'student_df' is not defined"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Q9SH0gToeKd4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            # Assuming the first two units are always in semester 1\n","            kaka_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.head(2)], axis=1)\n","            print(kaka_df)\n","        elif \"BCO7006\" in row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            # Selecting the units for semester 2\n","            kakaa_df = pd.DataFrame({'st_id': [row['st_id']] * 2, 'unit_name': unit_df['unit_name'][2:4],\n","                                     'unit_code': unit_df['unit_code'][2:4], 'semester': [2, 2]})\n","            print(kakaa_df)\n","        else:\n","            print(f\"{row['st_name']} has not provided any units passed.\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D4l-ErrJeK-u","executionInfo":{"status":"ok","timestamp":1710780654451,"user_tz":-600,"elapsed":24038,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"dd1ce209-c028-4308-82ea-969c98f89c2d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kak123\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","Bikash can enroll in the following units in semester 1:\n","    st_id      unit_name unit_code semester\n","0  kak123  Coding for BA   BCO7006        1\n","1  kak123  Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":["#### orginal one\n","\n","import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","\n","    unit_df = pd.DataFrame(unit_data)\n","\n","\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","\n","    # Check eligibility for each student\n","for index, row in student_df.iterrows():\n","    if row['unit_passed']:\n","        print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","        kaka_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.head().iloc[:, :2]], axis=1)\n","        print(kaka_df)\n","    elif \"BCO7006\" in row['unit_passed']:\n","        print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","        kakaa_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.iloc[2, :]], axis=1)\n","        print(kakaa_df)\n","\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"CzYQs_KKhLAO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"fu8lgy1EiBxn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            kaka_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.head().iloc[:, :2]], axis=1)\n","            print(kaka_df)\n","        elif \"BCO7006\" in row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            kakaa_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.iloc[2, :]], axis=1)\n","            print(kakaa_df)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YIQ2GcxCiB-3","executionInfo":{"status":"ok","timestamp":1710781669482,"user_tz":-600,"elapsed":23794,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"d78868e1-3f54-41bd-c9cc-76e5d1c53323"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: kaka123\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","bikash can enroll in the following units in semester 1:\n","     st_id             unit_name unit_code\n","0  kaka123         Coding for BA   BCO7006\n","1  kaka123         Biz analytics   BCO7000\n","2      NaN  Predictive analytics   BCO6008\n","3      NaN      Machine Learning   BCO7007\n","4      NaN         Women in STEM   WOM1000\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            kaka_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.head(2)], axis=1)\n","            print(kaka_df)\n","        elif \"BCO7006\" in row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            kakaa_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.iloc[2:4]], axis=1)\n","            print(kakaa_df)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CrhR7GbuKAl6","executionInfo":{"status":"ok","timestamp":1710859313829,"user_tz":-600,"elapsed":63612,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"dedd0e19-fa0a-46ce-aa60-a5e84ebbc66a"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bik\n","Student ID: gg\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","bik can enroll in the following units in semester 1:\n","  st_id      unit_name unit_code semester\n","0    gg  Coding for BA   BCO7006        1\n","1    gg  Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":["\n","import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if \"BCO7006\" in row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            kaka_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.head(2)], axis=1)\n","            print(kaka_df)\n","        elif \"BCO7000\" in row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            kakaa_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.iloc[2:4]], axis=1)\n","            print(kakaa_df)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f3zWjphhMQOl","executionInfo":{"status":"ok","timestamp":1710859893689,"user_tz":-600,"elapsed":20673,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"11b5e23d-aa46-4d67-e3ad-3a2e45a3739c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka23\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","Bikash can enroll in the following units in semester 1:\n","    st_id      unit_name unit_code semester\n","0  kaka23  Coding for BA   BCO7006        1\n","1  kaka23  Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_df):\n","    if semester == 1:\n","        print(f\"{student_name} can enroll in the following units in semester 1:\")\n","        return units_df.head(2)\n","    elif semester == 2:\n","        print(f\"{student_name} can enroll in the following units in semester 2:\")\n","        return units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], unit_df)\n","        print(units_to_enroll)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"evB0zTuyOoHH","executionInfo":{"status":"ok","timestamp":1710860512090,"user_tz":-600,"elapsed":23343,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"a2e25501-ab41-4e7f-e288-1f98aa5330c8"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: h23\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","Bikash can enroll in the following units in semester 1:\n","       unit_name unit_code semester\n","0  Coding for BA   BCO7006        1\n","1  Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"gmiKi_D1SoQS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"hiksz450O0uc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_df, units_passed):\n","    if semester == 1:\n","        print(f\"{student_name} can enroll in the following units in semester 1:\")\n","        return units_df.head(2)\n","    elif semester == 2:\n","        print(f\"{student_name} can enroll in the following units in semester 2:\")\n","        if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","            return units_df[(units_df['unit_code'] == \"BCO7006\") | (units_df['unit_code'] == \"BCO7000\")]\n","        else:\n","            return units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], unit_df, row['unit_passed'])\n","        print(units_to_enroll)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wj1qONMUREhl","executionInfo":{"status":"ok","timestamp":1710861132418,"user_tz":-600,"elapsed":51225,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"ca5d73ba-19b0-4336-94c1-c0c1c5bc9665"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: Kaka123\n","Gender: male\n","Units Passed (comma-separated): BCO7006,BCO7000\n","Semester: 2\n","Bikash can enroll in the following units in semester 2:\n","       unit_name unit_code semester\n","0  Coding for BA   BCO7006        1\n","1  Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, units_df):\n","    if semester == 1:\n","        print(f\"{student_name} can enroll in the following units in semester 1:\")\n","        return units_df.head(2)\n","    elif semester == 2:\n","        print(f\"{student_name} can enroll in the following units in semester 2:\")\n","        # Check if BCO7006 and BCO7000 are passed\n","        if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","            return units_df.iloc[3:4]\n","        else:\n","            return units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], unit_df)\n","        print(units_to_enroll)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lstTDRpiSptW","executionInfo":{"status":"ok","timestamp":1710861599253,"user_tz":-600,"elapsed":29884,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"b43d31dd-1103-422d-bb9c-6915126a0d24"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bikasd\n","Student ID: kaka1234\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","bikasd can enroll in the following units in semester 2:\n","              unit_name unit_code semester\n","2  Predictive analytics   BCO6008        2\n","3      Machine Learning   BCO7007        2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"tr3RZ6yoS28i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        print(f\"{student_name} can enroll in the following units in semester 2:\")\n","        # Check if BCO7006 and BCO7000 are passed\n","        if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","            units_to_enroll = units_df.iloc[3:4]\n","        else:\n","            units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    return units_to_enroll\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7kTIrH8sV2lR","executionInfo":{"status":"ok","timestamp":1710862365796,"user_tz":-600,"elapsed":28003,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"85a681bf-c93f-424f-9b43-5195eb95d4fb"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: malika\n","Student ID: kak123\n","Gender: female\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","malika can enroll in the following units in semester 2:\n","              unit_name unit_code  semester\n","2  Predictive analytics   BCO6008         2\n","3      Machine Learning   BCO7007         2\n","4         Women in STEM   WOM1000  elective\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"nSLnGhQZW0eg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        print(f\"{student_name} can enroll in the following units in semester 2:\")\n","        # Check if BCO7006 and BCO7000 are passed\n","        if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","            units_to_enroll = units_df.iloc[3:4]\n","        else:\n","            units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hXJON4vzW1CE","executionInfo":{"status":"ok","timestamp":1710862621383,"user_tz":-600,"elapsed":21881,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"f7dad982-001e-4037-d065-56e0b67529be"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka123\n","Gender: female\n","Units Passed (comma-separated): \n","Semester: 1\n","Bikash can enroll in the following units in semester 1:\n","     st_id      unit_name unit_code  semester\n","0  kaka123  Coding for BA   BCO7006         1\n","1  kaka123  Biz analytics   BCO7000         1\n","4  kaka123  Women in STEM   WOM1000  elective\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 2:\")\n","        # Check if BCO7006 and BCO7000 are passed\n","        if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","            units_to_enroll = units_df.iloc[3:4]\n","        else:\n","            units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ejrq2lBdXrlh","executionInfo":{"status":"ok","timestamp":1710901457585,"user_tz":-600,"elapsed":39942,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"4f03419f-f2fd-4661-a4ac-34360945dd1d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 2\n","\n","Enter details for student 1:\n","Student Name: roshni\n","Student ID: odood33\n","Gender: female\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","Enter details for student 2:\n","Student Name: ikash\n","Student ID: kakak3\n","Gender: male\n","Units Passed (comma-separated): BCO7000,BCO7006\n","Semester: 2\n","\n","roshni can enroll in the following units in semester 1:\n","  st_id     unit_name unit_code semester\n","odood33 Coding for BA   BCO7006        1\n","odood33 Biz analytics   BCO7000        1\n","odood33 Women in STEM   WOM1000 elective\n","\n","ikash can enroll in the following units in semester 2:\n"," st_id        unit_name unit_code semester\n","kakak3 Machine Learning   BCO7007        2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"qjdWhIm3rP03"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"gWPxxcGisGIJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"HyGPk3V5dyUz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ba1u4-V8YvZ9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        if not units_passed:\n","            print(f\"\\n{student_name} must pass the following subjects before enrolling in semester 2:\")\n","            units_to_enroll = units_df.head(2)\n","        elif \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","            print(f\"\\n{student_name} can enroll in the following units in semester 2:\")\n","            units_to_enroll = units_df.iloc[2:4]\n","        else:\n","            print(f\"\\n{student_name} must pass the required subjects before enrolling in semester 2:\")\n","            units_to_enroll = units_df.head(2)\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r2mL3dy-b_WK","executionInfo":{"status":"ok","timestamp":1710864109524,"user_tz":-600,"elapsed":114378,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"5694c06a-a35d-4309-ddeb-ee9a3c7e9111"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 4\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka1234\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","\n","Enter details for student 2:\n","Student Name: rekha\n","Student ID: kaka222\n","Gender: female\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","Enter details for student 3:\n","Student Name: udaya\n","Student ID: kaaaaa\n","Gender: male\n","Units Passed (comma-separated): BCO7006,BCO7000\n","Semester: 2\n","\n","Enter details for student 4:\n","Student Name: punkit\n","Student ID: kakakak222\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 2\n","\n","Bikash must pass the required subjects before enrolling in semester 2:\n","   st_id     unit_name unit_code semester\n","kaka1234 Coding for BA   BCO7006        1\n","kaka1234 Biz analytics   BCO7000        1\n","\n","rekha can enroll in the following units in semester 1:\n","  st_id     unit_name unit_code semester\n","kaka222 Coding for BA   BCO7006        1\n","kaka222 Biz analytics   BCO7000        1\n","kaka222 Women in STEM   WOM1000 elective\n","\n","udaya can enroll in the following units in semester 2:\n"," st_id            unit_name unit_code semester\n","kaaaaa Predictive analytics   BCO6008        2\n","kaaaaa     Machine Learning   BCO7007        2\n","\n","punkit must pass the required subjects before enrolling in semester 2:\n","     st_id     unit_name unit_code semester\n","kakakak222 Coding for BA   BCO7006        1\n","kakakak222 Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"-KmaAQNvsHNn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"dZRlkSFAdztV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"bh_BlAFYdz7Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 2:\")\n","        # Check if units_passed is empty\n","        if not units_passed:\n","            print(f\"{student_name} must pass the following subjects before enrolling in semester 2:\")\n","            units_to_enroll = units_df.head(2)\n","        else:\n","            # Check if BCO7006 and BCO7000 are passed\n","            if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","                units_to_enroll = units_df.iloc[3:4]\n","            else:\n","                units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wSoIlIUMcMyJ","executionInfo":{"status":"ok","timestamp":1710864538994,"user_tz":-600,"elapsed":92842,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"2845f086-8a4c-4de5-c3f4-4bc48bb3a8c4"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 4\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka122\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 2\n","\n","Enter details for student 2:\n","Student Name: kanxa\n","Student ID: kaa\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","\n","Enter details for student 3:\n","Student Name: kanxi\n","Student ID: kaka\n","Gender: female\n","Units Passed (comma-separated): BCO7006,BCO7000\n","Semester: 2\n","\n","Enter details for student 4:\n","Student Name: pankit\n","Student ID: akakka\n","Gender: mae\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","Bikash can enroll in the following units in semester 2:\n","  st_id            unit_name unit_code semester\n","kaka122 Predictive analytics   BCO6008        2\n","kaka122     Machine Learning   BCO7007        2\n","\n","kanxa can enroll in the following units in semester 2:\n","st_id            unit_name unit_code semester\n","  kaa Predictive analytics   BCO6008        2\n","  kaa     Machine Learning   BCO7007        2\n","\n","kanxi can enroll in the following units in semester 2:\n","st_id        unit_name unit_code semester\n"," kaka Machine Learning   BCO7007        2\n"," kaka    Women in STEM   WOM1000 elective\n","\n","pankit can enroll in the following units in semester 1:\n"," st_id     unit_name unit_code semester\n","akakka Coding for BA   BCO7006        1\n","akakka Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"5GGQlvocsIo4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"jC4UCGxIsJLc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        if not units_passed:  # If units_passed is empty for semester 2\n","            print(f\"\\n{student_name}, you must enroll in the following units before joining semester 2:\")\n","            units_to_enroll = units_df.head(2)\n","        else:\n","            print(f\"\\n{student_name} can enroll in the following units in semester 2:\")\n","            # Check if BCO7006 and BCO7000 are passed\n","            if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","                units_to_enroll = units_df.iloc[3:4]\n","            else:\n","                units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    semesters = []\n","    units_passed = []\n","\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        semesters.append(semester)\n","        units_passed.append(unit_passed)\n","\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'semester': semesters,\n","        'unit_passed': units_passed\n","\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rKKhdsB9tb0R","executionInfo":{"status":"ok","timestamp":1710902596052,"user_tz":-600,"elapsed":14192,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"9ef2ebc4-1d50-46c8-ab38-d360b806ee1c"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: kaka\n","Gender: male\n","Semester: 2\n","Units Passed (comma-separated): \n","\n","bikash can enroll in the following units in semester 2:\n","st_id            unit_name unit_code semester\n"," kaka Predictive analytics   BCO6008        2\n"," kaka     Machine Learning   BCO7007        2\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def determine_units_to_enroll(semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        if not units_passed:  # If units_passed is empty for semester 2\n","            units_to_enroll = units_df.head(2)\n","        else:\n","            # Check if BCO7006 and BCO7000 are passed\n","            if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","                units_to_enroll = units_df.iloc[3:4]\n","            else:\n","                units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = determine_units_to_enroll(semester, units_passed, gender, units_df)\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll\n","\n","def collect_student_data(num_students):\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    semesters = []\n","    units_passed = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        semesters.append(semester)\n","        units_passed.append(unit_passed)\n","\n","    return st_names, st_ids, genders, semesters, units_passed\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Collect student data\n","    st_names, st_ids, genders, semesters, units_passed = collect_student_data(num_students)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'semester': semesters,\n","        'unit_passed': units_passed\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nhc9mmhvwMOt","executionInfo":{"status":"ok","timestamp":1710902816372,"user_tz":-600,"elapsed":17112,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"dbe650ed-fd04-478a-9329-05fb0b4d195f"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: bakas'\n","Student ID: kaka\n","Gender: male\n","Semester: 2\n","Units Passed (comma-separated): \n","st_id            unit_name unit_code semester\n"," kaka Predictive analytics   BCO6008        2\n"," kaka     Machine Learning   BCO7007        2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"NKFMxNbf0QxN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 2:\")\n","        # Check if BCO7006 and BCO7000 are passed\n","        if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","            units_to_enroll = units_df.iloc[3:4]\n","        else:\n","            units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def main():\n","    print(\"Welcome to the Enrollment Process Screening System (EPSS) at Victoria University\")\n","\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3tuImT_b0RXj","executionInfo":{"status":"ok","timestamp":1710905267409,"user_tz":-600,"elapsed":68654,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"d533e285-9033-44ad-a5aa-b78d87f6f5b4"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Welcome to the Enrollment Process Screening System (EPSS) at Victoria University\n","Enter the number of students: 3\n","\n","Enter details for student 1:\n","Student Name: ramita\n","Student ID: kakak123\n","Gender: female\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","Enter details for student 2:\n","Student Name: bkash\n","Student ID: kkaaa\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","Enter details for student 3:\n","Student Name: Bikash\n","Student ID: akaka\n","Gender: BCO7006\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","\n","ramita can enroll in the following units in semester 1:\n","   st_id     unit_name unit_code semester\n","kakak123 Coding for BA   BCO7006        1\n","kakak123 Biz analytics   BCO7000        1\n","kakak123 Women in STEM   WOM1000 elective\n","\n","bkash can enroll in the following units in semester 1:\n","st_id     unit_name unit_code semester\n","kkaaa Coding for BA   BCO7006        1\n","kkaaa Biz analytics   BCO7000        1\n","\n","Bikash can enroll in the following units in semester 2:\n","st_id            unit_name unit_code semester\n","akaka Predictive analytics   BCO6008        2\n","akaka     Machine Learning   BCO7007        2\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 2:\")\n","        # Check if BCO7006 and BCO7000 are passed\n","        if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","            units_to_enroll = units_df.iloc[3:4]\n","        else:\n","            units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def main():\n","    print(\"Welcome to the Enrollment Process Screening System (EPSS) at Victoria University\")\n","\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_-5d0krKK2Rf","executionInfo":{"status":"ok","timestamp":1710909824966,"user_tz":-600,"elapsed":36782,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"2b1198cd-3977-4594-e33f-779954742821"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Welcome to the Enrollment Process Screening System (EPSS) at Victoria University\n","Enter the number of students: 2\n","\n","Enter details for student 1:\n","Student Name: Bikash\n","Student ID: kaka123\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 2\n","\n","Enter details for student 2:\n","Student Name: kaka\n","Student ID: kssss\n","Gender: female\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n","\n","Bikash can enroll in the following units in semester 2:\n","  st_id            unit_name unit_code semester\n","kaka123 Predictive analytics   BCO6008        2\n","kaka123     Machine Learning   BCO7007        2\n","\n","kaka can enroll in the following units in semester 2:\n","st_id            unit_name unit_code semester\n","kssss Predictive analytics   BCO6008        2\n","kssss     Machine Learning   BCO7007        2\n","kssss        Women in STEM   WOM1000 elective\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Nw9tozy3Oi41"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        if not units_passed:  # If units_passed is empty for semester 2\n","            print(f\"\\n{student_name}, you must enroll in the following units before joining semester 2:\")\n","            units_to_enroll = units_df.head(2)  # Display first two rows of unit_df\n","        else:\n","            print(f\"\\n{student_name} can enroll in the following units in semester 2:\")\n","            # Check if BCO7006 and BCO7000 are passed\n","            if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","                units_to_enroll = units_df.iloc[3:4]\n","            else:\n","                units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def main():\n","    print(\"Welcome to the Enrollment Process Screening System (EPSS) at Victoria University\")\n","\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j5PbDdVROjUp","executionInfo":{"status":"ok","timestamp":1710910784516,"user_tz":-600,"elapsed":27302,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"d6c025fb-211c-47ac-b175-8c44e03c0b90"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Welcome to the Enrollment Process Screening System (EPSS) at Victoria University\n","Enter the number of students: 2\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: kaka\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 2\n","\n","Enter details for student 2:\n","Student Name: bikash\n","Student ID: kaka\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","bikash can enroll in the following units in semester 2:\n","st_id            unit_name unit_code semester\n"," kaka Predictive analytics   BCO6008        2\n"," kaka     Machine Learning   BCO7007        2\n","\n","bikash can enroll in the following units in semester 1:\n","st_id     unit_name unit_code semester\n"," kaka Coding for BA   BCO7006        1\n"," kaka Biz analytics   BCO7000        1\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def enroll_units(student_name, student_id, semester, units_passed, gender, units_df):\n","    units_to_enroll = None\n","\n","    # Determine units based on semester\n","    if semester == 1:\n","        print(f\"\\n{student_name} can enroll in the following units in semester 1:\")\n","        units_to_enroll = units_df.head(2)\n","    elif semester == 2:\n","        if not units_passed:  # If units_passed is empty for semester 2\n","            print(f\"\\n{student_name}, you must enroll in the following units before joining semester 2:\")\n","            units_to_enroll = units_df.head(2)  # Display first two rows of unit_df\n","        else:\n","            print(f\"\\n{student_name} can enroll in the following units in semester 2:\")\n","            # Check if BCO7006 and BCO7000 are passed\n","            if \"BCO7006\" in units_passed and \"BCO7000\" in units_passed:\n","                units_to_enroll = units_df.iloc[3:4]\n","            else:\n","                units_to_enroll = units_df.iloc[2:4]\n","    else:\n","        print(\"Invalid semester provided.\")\n","\n","    # Add 5th row of units_df if gender is female\n","    if gender.lower() == 'female':\n","        units_to_enroll = pd.concat([units_to_enroll, units_df.iloc[[4]]])\n","\n","    # Add st_id column to units_to_enroll\n","    units_to_enroll.insert(0, 'st_id', student_id)\n","\n","    return units_to_enroll.reset_index(drop=True)  # Reset index\n","\n","def main():\n","    print(\"Welcome to the Enrollment Process Screening System (EPSS) at Victoria University\")\n","\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = int(input(\"Semester: \"))  # Convert input to integer\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        units_to_enroll = enroll_units(row['st_name'], row['st_id'], row['semester'], row['unit_passed'], row['gender'], unit_df)\n","        print(units_to_enroll.to_string(index=False))  # Print without index\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ui5EgaLbRs7A","executionInfo":{"status":"ok","timestamp":1711065261200,"user_tz":-600,"elapsed":48530,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"60e0f374-20a7-4199-8ea0-084e6906d4a5"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Welcome to the Enrollment Process Screening System (EPSS) at Victoria University\n","Enter the number of students: 2\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: kaka1234\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","Enter details for student 2:\n","Student Name: Roshni\n","Student ID: kkkk123\n","Gender: female\n","Units Passed (comma-separated): BCO7000\n","Semester: 2\n","\n","bikash can enroll in the following units in semester 1:\n","   st_id     unit_name unit_code semester\n","kaka1234 Coding for BA   BCO7006        1\n","kaka1234 Biz analytics   BCO7000        1\n","\n","Roshni can enroll in the following units in semester 2:\n","  st_id            unit_name unit_code semester\n","kkkk123 Predictive analytics   BCO6008        2\n","kkkk123     Machine Learning   BCO7007        2\n","kkkk123        Women in STEM   WOM1000 elective\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"52CYcwgqjxHa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# fake\n","import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if not row['unit_passed']:\n","            # If unit_passed is empty, select first three units for semester 1\n","            eligible_units = unit_df[unit_df['semester'] == 1].head(3)\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [1] * len(enroll_codes)  # Set semester to 1\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            print(enroll_df)\n","        elif row['unit_passed'] == ['BCO7006'] and row['semester'] == '1':\n","            eligible_units = unit_df[(unit_df['semester'] == 2) & (unit_df['unit_code'] != 'BCO7006')]\n","            enroll_codes = eligible_units['unit_code'].tolist()\n","            enroll_courses = eligible_units['unit_name'].tolist()\n","\n","            # Create DataFrame for enrollment information\n","            enroll_df = pd.DataFrame({\n","                'Enroll code': enroll_codes,\n","                'Enroll course': enroll_courses,\n","                'Student ID': [row['st_id']] * len(enroll_codes),\n","                'Semester': [2] * len(enroll_codes)  # Set semester to 2\n","            })\n","\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            print(enroll_df)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qj1TQo_Jjx2H","executionInfo":{"status":"ok","timestamp":1711000260647,"user_tz":-600,"elapsed":41976,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"f8ced956-4135-460a-e7b2-f6662411d9fd"},"execution_count":1,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the number of students: 2\n","\n","Enter details for student 1:\n","Student Name: bikash\n","Student ID: s12444\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","\n","Enter details for student 2:\n","Student Name: ram\n","Student ID: s2333\n","Gender: male\n","Units Passed (comma-separated): BCO7006\n","Semester: 2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"739hgeepFJwO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def main():\n","    # Sample dictionary with unit data\n","    unit_data = {\n","        'unit_name': [\"Coding for BA\", \"Biz analytics\", \"Predictive analytics\", \"Machine Learning\", \"Women in STEM\"],\n","        'unit_code': [\"BCO7006\", \"BCO7000\", \"BCO6008\", \"BCO7007\", \"WOM1000\"],\n","        'semester': [1, 1, 2, 2, 'elective']\n","    }\n","\n","    # Create DataFrame from the sample unit data\n","    unit_df = pd.DataFrame(unit_data)\n","\n","    # Prompt the user to enter the number of students\n","    num_students = int(input(\"Enter the number of students: \"))\n","\n","    # Initialize empty lists to store student data\n","    st_names = []\n","    st_ids = []\n","    genders = []\n","    units_passed = []\n","    semesters = []\n","\n","    # Collect student data from user input\n","    for i in range(num_students):\n","        print(f\"\\nEnter details for student {i + 1}:\")\n","        st_name = input(\"Student Name: \")\n","        st_id = input(\"Student ID: \")\n","        gender = input(\"Gender: \")\n","        unit_passed = input(\"Units Passed (comma-separated): \").split(\",\")\n","        semester = input(\"Semester: \")\n","\n","        # Append student data to respective lists\n","        st_names.append(st_name)\n","        st_ids.append(st_id)\n","        genders.append(gender)\n","        units_passed.append(unit_passed)\n","        semesters.append(semester)\n","\n","    # Create DataFrame from collected student data\n","    student_df = pd.DataFrame({\n","        'st_name': st_names,\n","        'st_id': st_ids,\n","        'gender': genders,\n","        'unit_passed': units_passed,\n","        'semester': semesters\n","    })\n","\n","    # Check eligibility for each student\n","    for index, row in student_df.iterrows():\n","        if row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 1:\")\n","            kaka_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.head(2)], axis=1)\n","            print(kaka_df)\n","        elif \"BCO7006\" in row['unit_passed']:\n","            print(f\"{row['st_name']} can enroll in the following units in semester 2:\")\n","            kakaa_df = pd.concat([pd.DataFrame({'st_id': [row['st_id']] * 2}), unit_df.iloc[2:4]], axis=1)\n","            print(kakaa_df)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LZgmFbOVFKgx","executionInfo":{"status":"ok","timestamp":1711076085941,"user_tz":-600,"elapsed":12601,"user":{"displayName":"Bikash poudel","userId":"00057661557172461448"}},"outputId":"5d43a3a2-6093-47ec-c197-e3beb47ac90a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of students: 1\n","\n","Enter details for student 1:\n","Student Name: ss\n","Student ID: ss\n","Gender: male\n","Units Passed (comma-separated): \n","Semester: 1\n","ss can enroll in the following units in semester 1:\n","  st_id      unit_name unit_code semester\n","0    ss  Coding for BA   BCO7006        1\n","1    ss  Biz analytics   BCO7000        1\n"]}]}]}